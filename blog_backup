--
-- PostgreSQL database dump
--

-- Dumped from database version 9.5.5
-- Dumped by pg_dump version 9.5.5

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: ar_internal_metadata; Type: TABLE; Schema: public; Owner: deploy
--

CREATE TABLE ar_internal_metadata (
    key character varying NOT NULL,
    value character varying,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE ar_internal_metadata OWNER TO deploy;

--
-- Name: articles; Type: TABLE; Schema: public; Owner: deploy
--

CREATE TABLE articles (
    id integer NOT NULL,
    title character varying,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    body text,
    author integer
);


ALTER TABLE articles OWNER TO deploy;

--
-- Name: articles_id_seq; Type: SEQUENCE; Schema: public; Owner: deploy
--

CREATE SEQUENCE articles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE articles_id_seq OWNER TO deploy;

--
-- Name: articles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: deploy
--

ALTER SEQUENCE articles_id_seq OWNED BY articles.id;


--
-- Name: ckeditor_assets; Type: TABLE; Schema: public; Owner: deploy
--

CREATE TABLE ckeditor_assets (
    id integer NOT NULL,
    data_file_name character varying NOT NULL,
    data_content_type character varying,
    data_file_size integer,
    data_fingerprint character varying,
    assetable_id integer,
    assetable_type character varying(30),
    type character varying(30),
    width integer,
    height integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE ckeditor_assets OWNER TO deploy;

--
-- Name: ckeditor_assets_id_seq; Type: SEQUENCE; Schema: public; Owner: deploy
--

CREATE SEQUENCE ckeditor_assets_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ckeditor_assets_id_seq OWNER TO deploy;

--
-- Name: ckeditor_assets_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: deploy
--

ALTER SEQUENCE ckeditor_assets_id_seq OWNED BY ckeditor_assets.id;


--
-- Name: comments; Type: TABLE; Schema: public; Owner: deploy
--

CREATE TABLE comments (
    id integer NOT NULL,
    body text,
    article_id integer,
    user_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE comments OWNER TO deploy;

--
-- Name: comments_id_seq; Type: SEQUENCE; Schema: public; Owner: deploy
--

CREATE SEQUENCE comments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE comments_id_seq OWNER TO deploy;

--
-- Name: comments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: deploy
--

ALTER SEQUENCE comments_id_seq OWNED BY comments.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: deploy
--

CREATE TABLE schema_migrations (
    version character varying NOT NULL
);


ALTER TABLE schema_migrations OWNER TO deploy;

--
-- Name: users; Type: TABLE; Schema: public; Owner: deploy
--

CREATE TABLE users (
    id integer NOT NULL,
    name character varying,
    password_digest character varying,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    is_admin boolean
);


ALTER TABLE users OWNER TO deploy;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: deploy
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE users_id_seq OWNER TO deploy;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: deploy
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: deploy
--

ALTER TABLE ONLY articles ALTER COLUMN id SET DEFAULT nextval('articles_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: deploy
--

ALTER TABLE ONLY ckeditor_assets ALTER COLUMN id SET DEFAULT nextval('ckeditor_assets_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: deploy
--

ALTER TABLE ONLY comments ALTER COLUMN id SET DEFAULT nextval('comments_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: deploy
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- Data for Name: ar_internal_metadata; Type: TABLE DATA; Schema: public; Owner: deploy
--

COPY ar_internal_metadata (key, value, created_at, updated_at) FROM stdin;
environment	production	2017-01-15 03:22:31.89528	2017-01-15 03:22:31.89528
\.


--
-- Data for Name: articles; Type: TABLE DATA; Schema: public; Owner: deploy
--

COPY articles (id, title, created_at, updated_at, body, author) FROM stdin;
2	First Post	2017-01-17 04:38:48.615629	2017-01-17 06:47:56.739208	<p>Welcome to my blog! This is basically a space&nbsp;to record various thoughts and projects. I don&#39;t really have a clear roadmap of what to post on here, but I&#39;ll try to keep it varied. As of right now, my first project is this blog. It&#39;s currently a Ruby on Rails app with ckeditor and paperclip for editing and&nbsp;a Postgres db for backend (overkill, but why not) running on a Digital Ocean server. Right now it&#39;s technically functional, but there&#39;s still a lot to be added. The user authentication is extremely basic and really adds nothing to the website besides allowing me to write posts. I&#39;ll probably add the following functionality:</p>\r\n\r\n<ul>\r\n\t<li>OAuth/OmniAuth for users</li>\r\n\t<li>Comments (so users have something to do)</li>\r\n\t<li>Post tagging</li>\r\n\t<li>User options (changing password, usernames, recovering account info, etc.)</li>\r\n\t<li>Administrative features</li>\r\n\t<li>Better CSS (though really I&#39;m digging the minimal look. I experimented with some bootstrap and I didn&#39;t really like it)</li>\r\n\t<li>Getting an SSL certificate. I&#39;m trying to do it through Let&#39;s Encrypt but am running into some difficulty</li>\r\n\t<li>MathJax support</li>\r\n\t<li>Mobile version</li>\r\n</ul>\r\n\r\n<p>The code behind the app is stored at&nbsp;<a href="http://github.com/nicholaslyang/blog">http://github.com/nicholaslyang/blog</a>. As I continue the blog I&#39;ll try to come up with some additional projects to post about. If anything else this will be a great way to record potential issues that I run into for posterity. Nothing like rediscovering old StackOverflow posts months after you&#39;ve forgotten which solution worked. Anyways, welcome to my blog!</p>\r\n\r\n<p>Nicholas</p>\r\n	1
3	Why No Bootstrap?	2017-01-17 21:54:11.327984	2017-01-17 22:08:02.202775	<p>Inevitably when someone is looking into designing a website, they encounter Bootstrap. Twitter Bootstrap is probably the most used front end&nbsp;framework in the world. And for good reason too! It&#39;s beautiful, elegant and super easy to customize. I could show you the miriad of different websites that use Bootstrap, but unfortunately my image uploading doesn&#39;t work and really, they&#39;re&nbsp;not hard to find. Just look at any website that ends in .io, .co or really any site made by someone with even a moderate amount of tech savviness. But why haven&#39;t I used Bootstrap here? Well I did. I added it and experimented with jumbotrons and navbars and et cetera, et cetera. In the end I decided to remove it in favor of this...ahem...minimalist design.</p>\r\n\r\n<p>So why? Well there were a couple reasons for this, least among them a need for uniqueness. Ubiquity&nbsp;is an easy way to disbarage Bootstrap, but really, it&#39;s not a valid argument. Pervasive, ubiquitous design is what allows for a generally smooth and intuitive user experience on the web. Basic stuff like clicking on the header to get to the home page allows us to navigate the web easily and quickly (If you want an in depth explanation read Don&#39;t Make Me Think by Steve Krug). Bootstrap gives you a beautiful, intuitive skeleton that allows for fantastically easy navigation. However, this website doesn&#39;t need it. Sure, if I had a product I wanted to pitch, or I had a lot of stuff to explain, I&#39;d probably slap a nice color scheme on it and use all the fancy drop down menus and the carousels. But this website has precisely one goal; it holds my blog posts. I don&#39;t need crazy navigational cues for this website to work. It does what it should and that&#39;s it.&nbsp;</p>\r\n\r\n<p>But I could have just stuck to one of the simple templates, no? Just use Bootstrap under the hood and keep all the nice powerful code. But that&#39;s another issue: I don&#39;t know what goes on under the hood. I looked at the basic templates and had no goddamn clue how to modify them or tweak them, or fix them. I don&#39;t know how they&#39;re generated, or how the Javascript works. If the Bootstrap team decided all of a sudden to switch their architecture, I wouldn&#39;t know how to fix the hundreds of inevitable issues. And really, the dependency hell that is the modern web is extremely scary. Look, chances are if I used Bootstrap it&#39;d be alright. It&#39;s not going anywhere and it&#39;s probably going to stay relatively consistent. But I don&#39;t need it.</p>\r\n\r\n<p>Nicholas</p>\r\n	1
4	Deploy First, Code Later	2017-01-19 08:18:49.677068	2017-01-24 02:05:37.286018	<p>You know those lessons you sorta understood intellectually, but only <i>got&nbsp;</i>after a particularly punishing project? This was one of those cases. I coded up the majority of this blog while I was in Europe. I got the basic back end and even some front end going. After a while, I decided, hey, why not, let&#39;s deploy this so that I can start writing. So I went to good old Digital Ocean, who have a great collection of tutorials for deployment. And began on <a href="https://www.digitalocean.com/community/tutorials/how-to-deploy-a-rails-app-with-unicorn-and-nginx-on-ubuntu-14-04">this tutorial</a>. Of course, I ran into an error. One of those absolutely confounding errors that have a million different causes and a million different solutions. Probably a blank Internal Server Error. Naturally, I thought I did something wrong, so I wiped my Digital Ocean server and tried again. Again, same error. So I figured, hey Digital Ocean can be a little outdated, how about I try <a href="https://gorails.com/deploy/ubuntu/16.04">this guide</a>?&nbsp;More errors! And so on and so on periodically throughout my trip. I&#39;d be sitting in a cafe in Paris, in Barcelona, in Budapest and trying to follow guide after guide on deployment, wondering what I was doing wrong.</p>\r\n\r\n<p>And it&#39;s not like these guides were badly written. They often had clear cut instructions that you could practically cut and paste into action. At last, my trip came to an end and my blog was still not deployed. After a few weeks of lazing around, I decided to try one more time. However this time, I figured, I might as well deploy a blank app along with the main one, for, yknow, testing purposes. Before I&#39;d attempted to deploy my full blog, hoping that once I&#39;d finish the process, I could just jump right into writing posts. So I went through the GoRails guide once again. I finished up the process, and typed the magical words &quot;cap production deploy&quot; and....nothing. Default Nginx page. But after a bit of StackOverflow browsing and a little magic, BOOM, my website was alive!!!&nbsp;Well, my &quot;hello rails&quot; website was alive.&nbsp;</p>\r\n\r\n<p>But why didn&#39;t it work the first ten times? Well, attempting to find out, I decided to add each feature, bit by bit, back to my test application. If I was some master at git, I&#39;d probably do it through some sort of rollback magic, but honestly I just copied and pasted most of it. I figured it would be a good time to refactor my code anyways. So I added feature, bit by bit, terrified I&#39;d slam right into the massive errors I&#39;d been stuck on for weeks, when suddenly...I had my blog fully deployed. No errors, no issues. Nothing. And then it struck me, like a big &quot;DUH&quot;. Why would I deploy hundreds of lines of untested code to production at once? Why would I want to trawl through page after page of code for hundreds of inevitable bugs? Because deployment will bring up bugs. And not cute little ants, but big fucking locusts of bugs. Deploying a full app is like building up a grain silo worth of hay and trying to find 10 needles. Deploying a blank app and adding functionality is like looking for one needle in one stack of hay before it gets to the silo. It&#39;s not easy, but it&#39;s sure as hell <em>easier</em>.&nbsp;</p>\r\n\r\n<p>And to this day I still don&#39;t know why this blog works. Or why it didn&#39;t. If you&#39;re looking for advice on deploying existing Rails applications then I honestly can&#39;t tell you how to fix your problems. But really that shouldn&#39;t be your goal. It&#39;s easy to ignore&nbsp;buzzwords like continuous integration or agile this or scrum that as only applicable in large projects. But even in small projects it&#39;s important to keep good practices. So go on, deploy your Rails/Express/Flask&nbsp;app before it piles up with a hundred commits.&nbsp;</p>\r\n\r\n<p>Nicholas</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>P.S. If you for some god unknown reason write deployment guides.&nbsp;<em>Thank you.&nbsp;</em>But also please&nbsp;test the guides on your junior devs. It&#39;s easy to follow a tutorial on something you already know. Practically every guide on the internet is filled with comments that really should be answered. Oh and please mark when your guide is outdated. That really helps a lot</p>\r\n\r\n<p>&nbsp;</p>\r\n	1
\.


--
-- Name: articles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: deploy
--

SELECT pg_catalog.setval('articles_id_seq', 4, true);


--
-- Data for Name: ckeditor_assets; Type: TABLE DATA; Schema: public; Owner: deploy
--

COPY ckeditor_assets (id, data_file_name, data_content_type, data_file_size, data_fingerprint, assetable_id, assetable_type, type, width, height, created_at, updated_at) FROM stdin;
\.


--
-- Name: ckeditor_assets_id_seq; Type: SEQUENCE SET; Schema: public; Owner: deploy
--

SELECT pg_catalog.setval('ckeditor_assets_id_seq', 1, false);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: deploy
--

COPY comments (id, body, article_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: deploy
--

SELECT pg_catalog.setval('comments_id_seq', 1, false);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: deploy
--

COPY schema_migrations (version) FROM stdin;
20161020185254
20161022040010
20161102094500
20161102101757
20161103144306
20170111200235
20170122050809
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: deploy
--

COPY users (id, name, password_digest, created_at, updated_at, is_admin) FROM stdin;
1	nicholas	$2a$10$3icfXCjSQrYDEmte64QBVuJra8/yI4AyD8Bko9nLhpQ1rd/jh5D9C	2017-01-15 03:23:55.737239	2017-01-15 03:23:55.737239	t
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: deploy
--

SELECT pg_catalog.setval('users_id_seq', 1, true);


--
-- Name: ar_internal_metadata_pkey; Type: CONSTRAINT; Schema: public; Owner: deploy
--

ALTER TABLE ONLY ar_internal_metadata
    ADD CONSTRAINT ar_internal_metadata_pkey PRIMARY KEY (key);


--
-- Name: articles_pkey; Type: CONSTRAINT; Schema: public; Owner: deploy
--

ALTER TABLE ONLY articles
    ADD CONSTRAINT articles_pkey PRIMARY KEY (id);


--
-- Name: ckeditor_assets_pkey; Type: CONSTRAINT; Schema: public; Owner: deploy
--

ALTER TABLE ONLY ckeditor_assets
    ADD CONSTRAINT ckeditor_assets_pkey PRIMARY KEY (id);


--
-- Name: comments_pkey; Type: CONSTRAINT; Schema: public; Owner: deploy
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: deploy
--

ALTER TABLE ONLY schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: deploy
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: idx_ckeditor_assetable; Type: INDEX; Schema: public; Owner: deploy
--

CREATE INDEX idx_ckeditor_assetable ON ckeditor_assets USING btree (assetable_type, assetable_id);


--
-- Name: idx_ckeditor_assetable_type; Type: INDEX; Schema: public; Owner: deploy
--

CREATE INDEX idx_ckeditor_assetable_type ON ckeditor_assets USING btree (assetable_type, type, assetable_id);


--
-- Name: index_comments_on_article_id; Type: INDEX; Schema: public; Owner: deploy
--

CREATE INDEX index_comments_on_article_id ON comments USING btree (article_id);


--
-- Name: index_comments_on_user_id; Type: INDEX; Schema: public; Owner: deploy
--

CREATE INDEX index_comments_on_user_id ON comments USING btree (user_id);


--
-- Name: fk_rails_03de2dc08c; Type: FK CONSTRAINT; Schema: public; Owner: deploy
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT fk_rails_03de2dc08c FOREIGN KEY (user_id) REFERENCES users(id);


--
-- Name: fk_rails_3bf61a60d3; Type: FK CONSTRAINT; Schema: public; Owner: deploy
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT fk_rails_3bf61a60d3 FOREIGN KEY (article_id) REFERENCES articles(id);


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

