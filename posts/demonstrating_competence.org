Well I'm back. After some amazingly annoying errors getting Rails associations to work, some ridiculously confusing non-errors, and one blog post deleted (I'll rewrite it sometime soon). I've finally gotten comments to work. Of course, nobody's actually reading this blog (yet) so I doubt they'll be used much. My next goal is to get a more robust account system set up (probably using a prepackaged gem, I'm not about to reinvent OAuth, password recovery, etc.). Oh and also spell check. I have a feeling these posts are filled with errors.

Anyways, on to my main topic: demonstrating competence. As an 18 year old developer, this is a particularly difficult task. Of course, you may ask, "are you really competent to begin with?" No, I really am not. But that's besides the point. I still need to demonstrate relative competence to say an 18 year old whose knowledge extends as far as a for loop in Python, while not sounding like I'm Donald Knuth incarnate. This, as it turns out, is pretty difficult. 

For example, take Java. Practically any kid who has learned programming or computer science in high school has learned Java, mainly due to the AP curriculum. In fact, most high school curricula conflate Java with CS. And this is for good reason; Java is an extremely powerful language used throughout the industry (well, that's what the internet tells me). It's portable, relatively easy to learn (for a C based language) and teaches important ideas such as Object Oriented programming. So what's not to like about a kid who puts Java on his resume? 

Well, the main issue is that the AP curriculum does not teach real Java. And this isn't a knock against the College Board! Real Java (trademark Nicholas Yang 2017) would be a mess of design patterns and best practices and standards that would only confuse and irritate the students. The Java that the AP curriculum teaches is the bare minimum needed to implement the actually important stuff: Algorithms and data structures. Keep in mind I had a very good APCS class. I had a great teacher (Mike Zamansky, who you can follow here) who covered a lot more than the AP curriculum and actually explained a bit of "the Java way" when it came to programming logic. Yet when I came out of that class I was nowhere closer to being able to code Real Java than if I had taken a Data Structures and Algorithms class in C or even Python.

On the other hand, let's take Python. Python is a particularly ubiquitous languages. Practically every student has had some experience in Python. It's easy to learn, holds your hand through the development process and is fast to code. As a result, putting Python on a resume is practically meaningless. Saying you know Python is like saying you know English. It's useful, but not exactly notable.

For example, I went to PennApps last fall, where I had the misfortune of trying to find a team at the event itself. Quick tip, just because a hackathon says you can pick a team on site, doesn't mean it's a good idea. Also learn front end development, as everybody will want you on their team. But anyways, when I was picking out team members, I noticed something; if someone said their main two languages were Python and Java, I was immediately suspicious of them. If they mentioned additional frameworks, or tools, such as Flask, sure, I'd be more interested in working with them. But Python and Java alone? Not 
really. 

The result of all of this is something I guess I understood already; languages are not an accurate determiner of competence. Hiring a developer shouldn't be as simple as "do they know language x?". A developer isn't a translator. They don't just write the code in the language you want. They are in charge of designing a program that is robust,
understandable, and fits the requirements given.

But if language isn't a good way to demonstrate competence, what is? Well projects. Whether it's from previous jobs or just personal, projects allow you to demonstrate coding ability and design process. They can distinguish someone who knows a little bit of Python scripting from someone who deployed a Flask app to production. Additionally, specific frameworks and tools can help get you out of the Java/Python curse. Saying you worked in a Spring application is a lot more impressive than just listing "Java" on your resume. 

However, not every person understands this. I've had many conversations with people who are looking for an entry level position, but get caught up on knowing specific language. Sure, if you're hiring for a mid level to senior position, requiring specific experience is understandable. But if you're hiring a junior developer, maybe look beyond the tool. On the flip side, as a junior developer, you need to make an effort to learn new technologies and new languages so that if you're facing someone who just needs to have a junior IOS developer, they don't ignore you for someone who has 1 month of Swift experience
